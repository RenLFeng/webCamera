
var ecmpDataPts = {
    cityIDs: '0,11,12,13,14,15,21,22,23,31,32,33,34,35,36,37,41,42,43,44,45,46,50,51,52,53,54,61,62,63,64,65,71,81,82,110101,110102,110103,110104,110105,110106,110107,110108,110109,110111,110112,110113,110114,110115,110116,110117,110228,110229,120101,120102,120103,120104,120105,120106,120107,120108,120109,120110,120111,120112,120113,120114,120115,120221,120223,120225,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1501,1502,1503,1504,1505,1506,1507,1508,1509,1522,1525,1529,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2201,2202,2203,2204,2205,2206,2207,2208,2224,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2327,310101,310103,310104,310105,310106,310107,310108,310109,310110,310112,310113,310114,310115,310116,310117,310118,310119,310120,310230,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3401,3402,3403,3404,3405,3406,3407,3408,3410,3411,3412,3413,3414,3415,3416,3417,3418,3501,3502,3503,3504,3505,3506,3507,3508,3509,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4201,4202,4203,4205,4206,4207,4208,4209,4210,4211,4212,4213,4228,429004,429005,429006,429021,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4331,4401,4402,4403,4404,4405,4406,4407,4408,4409,4412,4413,4414,4415,4416,4417,4418,4419,4420,4451,4452,4453,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4601,4602,469001,469002,469003,469005,469006,469007,469025,469026,469027,469028,469030,469031,469033,469034,469035,469036,500101,500102,500103,500104,500105,500106,500107,500108,500109,500110,500111,500112,500113,500114,500115,500116,500117,500118,500119,500222,500223,500224,500225,500226,500227,500228,500229,500230,500231,500232,500233,500234,500235,500236,500237,500238,500240,500241,500242,500243,5101,5103,5104,5105,5106,5107,5108,5109,5110,5111,5113,5114,5115,5116,5117,5118,5119,5120,5132,5133,5134,5201,5202,5203,5204,5222,5223,5224,5226,5227,5301,5303,5304,5305,5306,5307,5308,5309,5323,5325,5326,5328,5329,5331,5333,5334,5401,5421,5422,5423,5424,5425,5426,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6229,6230,6301,6321,6322,6323,6325,6326,6327,6328,6401,6402,6403,6404,6405,6501,6502,6521,6522,6523,6527,6528,6529,6530,6531,6532,6540,6542,6543,659001,659002,659003,659004,7100,8100,8200',
    cityPts: '28523,21087,42978,16644,43945,17688,41923,19501,38935,19886,44121,11536,48867,15601,52998,12469,54668,6317,47988,27851,46582,25818,47021,30597,43769,26917,44824,34552,42539,32849,45263,21423,39990,24609,38759,28016,38056,32739,39990,38452,34804,37408,36474,42957,34277,29224,29443,29224,33134,33288,28388,35486,15293,27356,36123,22412,22236,16754,22763,22687,32519,20324,11425,14777,47548,37463,40781,39057,40078,39277,42941,17041,42886,17043,42940,17111,42883,17106,43021,17026,42791,17173,42712,17043,42743,16932,42323,16967,42368,17317,43253,17196,43247,16759,42701,16696,42995,17418,43161,16184,43694,16706,43615,16322,42677,16301,43724,18063,43780,18061,43760,18112,43676,18078,43738,18009,43683,18004,44203,18213,44412,17938,43911,18516,43924,18059,43706,18209,43919,18262,43699,17893,43585,17697,43950,17473,44203,17731,43505,18423,43990,16957,41023,19336,45000,17358,45736,16933,41001,21293,41330,20359,41572,18093,41671,15896,44099,15202,43352,19199,43044,18148,42407,19817,38858,19536,40308,17207,40001,19343,39386,21368,39309,22419,39594,17338,39298,20249,37672,22962,38979,18341,38001,21759,37880,19796,37935,16349,36870,15099,33409,17619,45197,12882,47999,12003,35496,17901,47329,4188,34079,15312,39100,14749,47911,9283,42165,11742,28542,16837,49647,14309,48746,17661,49603,16204,51108,14639,50669,15463,51064,16432,48186,15176,48955,16424,48526,14124,49932,15539,48471,15656,50800,13534,46593,15099,46681,16239,52338,11639,53360,12456,51064,12601,51866,13507,52481,14639,53745,14344,50614,11062,49526,10382,55920,12888,54492,10252,51064,7484,59315,9792,56964,7327,60117,8522,51295,8927,55722,7011,59524,7492,57799,9517,56305,11076,53668,5342,53239,8459,50625,1668,48010,27938,47999,27953,47956,28011,47908,27947,47971,27926,47911,27887,47974,27863,48011,27863,48051,27841,48022,28107,47958,27706,47767,27758,48216,27892,47789,28448,47721,28178,47698,27973,48399,28269,48098,28402,48087,27539,45329,27061,46867,27521,44044,24053,45977,27514,47175,27713,47625,26758,45648,23772,45450,25207,46746,25014,45988,25942,45999,26999,46582,26271,45077,24739,46054,29616,48120,29903,47021,32197,47439,28668,46384,28489,47087,29766,46527,30583,45208,30878,48779,29183,47658,31126,46087,31731,43813,26889,44879,28104,43934,25578,43308,25997,45153,27542,43220,24849,44461,28289,43275,28804,44571,29519,44714,26292,42286,25722,44044,24857,44296,27589,42835,27171,42714,25124,43912,29211,45329,28682,45977,34559,44692,36152,45615,35279,44055,34086,44846,35568,44099,36496,44659,32856,43330,35458,46175,33234,42528,31133,43857,30308,40451,32609,41945,30241,41473,32191,43604,31668,41803,34697,41407,33254,41539,31558,42967,32596,44384,31051,43681,20874,46988,21541,44560,21204,43846,23346,45230,20023,47263,20071,45615,21307,43352,22789,43549,21897,48471,20538,45802,22584,44176,21623,44835,22844,43209,20448,42440,21458,44340,20092,42143,22954,39990,23683,41099,23697,38584,24067,39495,24788,41056,21959,40902,22282,40726,22762,39364,23023,41715,22213,40221,24403,40396,24843,37353,24067,38924,25667,42264,24108,41352,26937,41396,24843,40682,25832,40913,28633,41539,29561,37035,26477,37694,28509,38463,27054,41253,28949,39199,28214,40473,28063,39814,29451,41792,28633,40781,29883,39957,27116,36024,29142,39902,29087,39287,29011,39550,28661,36980,27487,39605,31641,40056,33172,39067,32327,38935,33474,37485,33447,39759,30542,37924,30377,37035,30302,38254,31483,39759,34628,38232,34772,36474,32657,38166,32313,36309,31119,40034,37937,40319,36083,41067,38782,40254,39317,43692,37786,39419,38074,39155,39277,36881,40726,37529,39434,38650,37484,41143,38006,42649,36771,42099,38157,41440,36997,38353,39372,39441,36551,40418,38336,39946,38864,43308,37176,42649,37821,38309,38397,35002,38068,35903,35741,37078,35314,37518,37581,35837,39936,34574,39551,35551,39344,36463,37779,36738,38988,33123,37058,37837,36461,34387,36234,36233,37162,33859,38871,36912,42147,35895,43999,36051,43424,36944,42932,35852,42506,37414,42234,36837,43413,35373,43161,36861,42624,36561,42759,36517,42298,36219,42204,35893,42948,35564,42944,35551,43674,36515,43784,36151,43698,36364,43119,34914,28592,33859,29862,33057,30027,33014,30186,33354,29938,32893,29938,32882,30206,33189,30041,33090,29602,33431,30796,32310,30096,33244,29649,33255,30186,35244,30123,33684,29492,32739,30728,32849,29327,32387,30391,33695,30549,33178,30941,32299,29319,32552,29704,32277,29944,32036,30123,32728,29986,34266,28647,35299,27074,34365,29581,33980,29156,34178,30274,34420,29059,34936,27892,35354,28201,35914,28303,36408,28063,35859,27611,34804,29333,35540,31311,35343,30878,34727,30213,30476,28509,31190,30363,28213,33571,31981,31346,31003,28071,31256,27123,32212,26677,32058,28627,31377,29944,30102,30494,32728,28022,30333,29443,31179,31277,33156,28914,34134,27796,29190,29594,33585,26964,31497,29264,29004,26394,26444,28112,28487,32368,33222,33502,31278,34346,33431,31744,32431,34477,35145,31949,32058,35218,31684,33131,34947,33941,33772,34662,29443,35129,30465,34833,28454,37099,25587,35727,30619,32458,26971,33268,27268,37683,26136,36893,28125,35259,29564,37457,31410,37498,27421,39633,26477,34861,24653,36228,25675,33763,25982,32046,17710,29278,23543,28578,18731,31538,12766,30076,14721,25309,8888,26003,21983,30569,35639,24212,35562,22968,33706,24033,34936,23373,36309,23174,35628,21431,33409,25694,36397,19206,35639,25997,36331,24761,30113,21582,24697,17207,28597,18821,31388,21327,32168,23676,29542,19329,26323,18533,33596,22811,22785,16397,34057,21712,31080,23106,31827,25008,29795,22494,29443,23601,27927,20936,28894,21588,26894,19569,28092,23064,26894,22034,25905,24403,20116,24541,21500,20572,32882,19239,33003,18209,33376,20242,32662,22042,31926,20771,14447,12477,11810,10081,16161,13946,20302,13307,16204,11398,8371,11089,14688,17462,9503,15683,1153,17558,3691,19646,7690,20729,9074,12524,13150,9648,14820,8096,12546,11598,7800,16143,5658,17118,14062,11584,47553,37452,40801,39079,40095,39264'
};





























/*
地图用核心数据，id互转等
*/

(function (mount) {
    mount = mount || window;
    var _funName = 'cmapIDs',
        _e2p,
        _p2e;
    var cmapIDs = function () {
        if(_e2p && _p2e){return cmapIDs;}
        _e2p = cmapIDs.e2p = {};
        _p2e = cmapIDs.p2e = {};
        var item;
        for(var index = strArr.length; index--;){
            item = strArr[index].split(',');
            _e2p[item[0]] = item[1];
            _p2e[item[1]] = item[0];
        }
        _p2e['514'] = '11';//北京
        _p2e['164'] = '12';//天津
        _p2e['57'] = '31';//上海
        _p2e['11'] = '50';//重庆
        _e2p['0'] = '0';
        _p2e['0'] = '0';
        return cmapIDs;
    },
    strArr = cmapIDs.strArr = {a: [
        '11,911', //北京
        '12,923', //天津
        '13,920', //河北
        '14,929', //山西
        '15,905', //内蒙古
        '21,907', //辽宁
        '22,922', //吉林
        '23,921', //黑龙江
        '31,910', //上海
        '32,916', //江苏
        '33,917', //浙江
        '34,928', //安徽
        '35,909', //福建
        '36,903', //江西
        '37,901', //山东
        '41,927', //河南
        '42,906', //湖北
        '43,908', //湖南
        '44,913', //广东
        '45,912', //广西
        '46,930', //海南
        '50,904', //重庆
        '51,914', //四川
        '52,902', //贵州
        '53,915', //云南
        '54,932', //西藏
        '61,924', //陕西
        '62,925', //甘肃
        '63,918', //青海
        '64,919', //宁夏
        '65,926', //新疆
        '71,931', //台湾
        '81,933', //香港
        '82,934', //澳门

        '8100,663', //香港
        '8200,664', //澳门

        /*
        //911-514-北京
        //164-923-天津
        //910-57-上海
        //904-11-重庆

        //'7100,', //台湾

        //11,北京
        '110101,', //东城区
        '110102,', //西城区
        '110103,', //崇文区
        '110104,', //宣武区
        '110105,', //朝阳区
        '110106,', //丰台区
        '110107,', //石景山区
        '110108,', //海淀区
        '110109,', //门头沟区
        '110111,', //房山区
        '110112,', //通州区
        '110113,', //顺义区
        '110114,', //昌平区
        '110115,', //大兴区
        '110116,', //怀柔区
        '110117,', //平谷区
        '110228,', //密云县
        '110229,', //延庆县

        //12,天津
        '120101,', //和平区
        '120102,', //河东区
        '120103,', //河西区
        '120104,', //南开区
        '120105,', //河北区
        '120106,', //红桥区
        '120107,', //塘沽区
        '120108,', //汉沽区
        '120109,', //大港区
        '120110,', //东丽区
        '120111,', //西青区
        '120112,', //津南区
        '120113,', //北辰区
        '120114,', //武清区
        '120115,', //宝坻区
        '120221,', //宁河县
        '120223,', //静海县
        '120225,', //蓟县

        //31,上海
        '310101,', //黄浦区
        '310103,', //卢湾区
        '310104,', //徐汇区
        '310105,', //长宁区
        '310106,', //静安区
        '310107,', //普陀区
        '310108,', //闸北区
        '310109,', //虹口区
        '310110,', //杨浦区
        '310112,', //闵行区
        '310113,', //宝山区
        '310114,', //嘉定区
        '310115,', //浦东新区
        '310116,', //金山区
        '310117,', //松江区
        '310118,', //青浦区
        '310119,', //南汇区
        '310120,', //奉贤区
        '310230,', //崇明县

        //50,重庆
        '500101,', //万州区
        '500102,', //涪陵区
        '500103,', //渝中区
        '500104,', //大渡口区
        '500105,', //江北区
        '500106,', //沙坪坝区
        '500107,', //九龙坡区
        '500108,', //南岸区
        '500109,', //北碚区
        '500110,', //万盛区
        '500111,', //双桥区
        '500112,', //渝北区
        '500113,', //巴南区
        '500114,', //黔江区
        '500115,', //长寿区
        '500116,', //江津区
        '500117,', //合川区
        '500118,', //永川区
        '500119,', //南川区
        '500222,', //綦江县
        '500223,', //潼南县
        '500224,', //铜梁县
        '500225,', //大足县
        '500226,', //荣昌县
        '500227,', //璧山县
        '500228,', //梁平县
        '500229,', //城口县
        '500230,', //丰都县
        '500231,', //垫江县
        '500232,', //武隆县
        '500233,', //忠县
        '500234,', //开县
        '500235,', //云阳县
        '500236,', //奉节县
        '500237,', //巫山县
        '500238,', //巫溪县
        '500240,', //石柱土家族自治县
        '500241,', //秀山土家族苗族自治县
        '500242,', //酉阳土家族苗族自治县
        '500243,', //彭水苗族土家族自治县
        */

        //13,河北
        '1301,141', //石家庄市
        '1302,261', //唐山市
        '1303,146', //秦皇岛市
        '1304,292', //邯郸市
        '1305,293', //邢台市
        '1306,259', //保定市
        '1307,144', //张家口市
        '1308,145', //承德市
        '1309,148', //沧州市
        '1310,147', //廊坊市
        '1311,143', //衡水市
        //14,山西
        '1401,231', //太原市
        '1402,227', //大同市
        '1403,236', //阳泉市
        '1404,228', //长治市
        '1405,234', //晋城市
        '1406,235', //朔州市
        '1407,230', //晋中市
        '1408,233', //运城市
        '1409,229', //忻州市
        '1410,232', //临汾市
        '1411,237', //吕梁市
        //15,内蒙古
        '1501,20', //呼和浩特市
        '1502,13', //包头市
        '1503,16', //乌海市
        '1504,21', //赤峰市
        '1505,22', //通辽市
        '1506,14', //鄂尔多斯市
        '1507,25', //呼伦贝尔市
        '1508,15', //巴彦淖尔市
        '1509,331', //乌兰察布市
        '1522,333', //兴安盟
        '1525,19', //锡林郭勒盟
        '1529,17', //阿拉善盟
        //21,辽宁
        '2101,150', //沈阳市
        '2102,29', //大连市
        '2103,215', //鞍山市
        '2104,222', //抚顺市
        '2105,220', //本溪市
        '2106,219', //丹东市
        '2107,217', //锦州市
        '2108,221', //营口市
        '2109,223', //阜新市
        '2110,224', //辽阳市
        '2111,151', //盘锦市
        '2112,218', //铁岭市
        '2113,216', //朝阳市
        '2114,225', //葫芦岛市
        //22,吉林
        '2201,154', //长春市
        '2202,270', //吉林市
        '2203,155', //四平市
        '2204,191', //辽源市
        '2205,407', //通化市
        '2206,408', //白山市
        '2207,194', //松原市
        '2208,410', //白城市
        '2224,525', //延边朝鲜族自治州
        //23,黑龙江
        '2301,152', //哈尔滨市
        '2302,319', //齐齐哈尔市
        '2303,323', //鸡西市
        '2304,301', //鹤岗市
        '2305,359', //双鸭山市
        '2306,153', //大庆市
        '2307,295', //伊春市
        '2308,320', //佳木斯市
        '2309,302', //七台河市
        '2310,322', //牡丹江市
        '2311,300', //黑河市
        '2312,324', //绥化市
        '2327,297', //大兴安岭地区
        //32,江苏
        '3201,125', //南京市
        '3202,127', //无锡市
        '3203,161', //徐州市
        '3204,162', //常州市
        '3205,126', //苏州市
        '3206,163', //南通市
        '3207,156', //连云港市
        '3208,157', //淮安市
        '3209,160', //盐城市
        '3210,158', //扬州市
        '3211,169', //镇江市
        '3212,159', //泰州市
        '3213,172', //宿迁市
        //33,浙江
        '3301,138', //杭州市
        '3302,289', //宁波市
        '3303,149', //温州市
        '3304,304', //嘉兴市
        '3305,305', //湖州市
        '3306,303', //绍兴市
        '3307,135', //金华市
        '3308,288', //衢州市
        '3309,306', //舟山市
        '3310,287', //台州市
        '3311,134', //丽水市
        //34,安徽
        '3401,189', //合肥市
        '3402,188', //芜湖市
        '3403,187', //蚌埠市
        '3404,178', //淮南市
        '3405,185', //马鞍山市
        '3406,183', //淮北市
        '3407,173', //铜陵市
        '3408,186', //安庆市
        '3410,174', //黄山市
        '3411,182', //滁州市
        '3412,184', //阜阳市
        '3413,179', //宿州市
        '3414,177', //巢湖市
        '3415,181', //六安市
        '3416,391', //亳州市
        '3417,175', //池州市
        '3418,176', //宣城市
        //35,福建
        '3501,50', //福州市
        '3502,54', //厦门市
        '3503,51', //莆田市
        '3504,52', //三明市
        '3505,55', //泉州市
        '3506,56', //漳州市
        '3507,253', //南平市
        '3508,53', //龙岩市
        '3509,87', //宁德市
        //36,江西
        '3601,5', //南昌市
        '3602,137', //景德镇市
        '3603,136', //萍乡市
        '3604,6', //九江市
        '3605,246', //新余市
        '3606,7', //鹰潭市
        '3607,10', //赣州市
        '3608,115', //吉安市
        '3609,256', //宜春市
        '3610,8', //抚州市
        '3611,9', //上饶市
        //37,山东
        '3701,1', //济南市
        '3702,77', //青岛市
        '3703,81', //淄博市
        '3704,85', //枣庄市
        '3705,82', //东营市
        '3706,78', //烟台市
        '3707,80', //潍坊市
        '3708,352', //济宁市
        '3709,353', //泰安市
        '3710,88', //威海市
        '3711,366', //日照市
        '3712,356', //莱芜市
        '3713,79', //临沂市
        '3714,86', //德州市
        '3715,83', //聊城市
        '3716,76', //滨州市
        '3717,84', //菏泽市
        //41,河南
        '4101,168', //郑州市
        '4102,264', //开封市
        '4103,378', //洛阳市
        '4104,266', //平顶山市
        '4105,370', //安阳市
        '4106,374', //鹤壁市
        '4107,263', //新乡市
        '4108,265', //焦作市
        '4109,380', //濮阳市
        '4110,268', //许昌市
        '4111,379', //漯河市
        '4112,381', //三门峡市
        '4113,262', //南阳市
        '4114,376', //商丘市
        '4115,373', //信阳市
        '4116,375', //周口市
        '4117,371', //驻马店市
        '4118,667', //济源市
        //42,湖北
        '4201,28', //武汉市
        '4202,30', //黄石市
        '4203,36', //十堰市
        '4205,35', //宜昌市
        '4206,32', //襄樊市
        '4207,39', //鄂州市
        '4208,34', //荆门市
        '4209,41', //孝感市
        '4210,31', //荆州市
        '4211,33', //黄冈市
        '4212,40', //咸宁市
        '4213,37', //随州市
        '4228,38', //恩施土家族苗族自治州
        '429004,42', //仙桃市
        '429005,74', //潜江市
        '429006,73', //天门市
        '429006,654', //天门仙桃
        '429021,687', //神农架林区
        //43,湖南
        '4301,43', //长沙市
        '4302,46', //株洲市
        '4303,47', //湘潭市
        '4304,45', //衡阳市
        '4305,405', //邵阳市
        '4306,44', //岳阳市
        '4307,68', //常德市
        '4308,226', //张家界市
        '4309,48', //益阳市
        '4310,49', //郴州市
        '4311,269', //永州市
        '4312,67', //怀化市
        '4313,66', //娄底市
        '4331,65', //湘西土家族苗族自治州
        //44,广东
        '4401,95', //广州市
        '4402,201', //韶关市
        '4403,94', //深圳市
        '4404,200', //珠海市
        '4405,212', //汕头市
        '4406,196', //佛山市
        '4407,198', //江门市
        '4408,197', //湛江市
        '4409,203', //茂名市
        '4412,209', //肇庆市
        '4413,199', //惠州市
        '4414,211', //梅州市
        '4415,213', //汕尾市
        '4416,210', //河源市
        '4417,202', //阳江市
        '4418,208', //清远市
        '4419,133', //东莞市
        '4420,207', //中山市
        '4451,204', //潮州市
        '4452,205', //揭阳市
        '4453,195', //云浮市
        //45,广西
        '4501,90', //南宁市
        '4502,89', //柳州市
        '4503,91', //桂林市
        '4504,132', //梧州市
        '4505,128', //北海市
        '4506,130', //防城港市
        '4506,658', //防城
        '4507,129', //钦州市
        '4508,93', //贵港市
        '4509,118', //玉林市
        '4510,131', //百色市
        '4511,92', //贺州市
        '4512,119', //河池市
        '4513,506', //来宾市
        '4514,665', //崇左市
        //46,海南
        '4601,239', //海口市
        '4602,243', //三亚市
        '469001,582', //五指山市
        '469002,242', //琼海市
        '469003,244', //儋州市
        '469005,670', //文昌市
        '469006,241', //万宁市
        '469007,456', //东方市
        '469025,681', //定安县
        '469026,684', //屯昌县
        '469027,675', //澄迈县
        '469028,680', //临高县
        '469030,689', //白沙黎族自治县
        '469031,683', //昌江黎族自治县
        '469033,679', //乐东黎族自治县
        '469034,674', //陵水黎族自治县
        '469035,686', //保亭黎族苗族自治县
        '469036,690', //琼中黎族苗族自治县
        //51,四川
        '5101,97', //成都市
        '5103,111', //自贡市
        '5104,112', //攀枝花市
        '5105,103', //泸州市
        '5106,106', //德阳市
        '5107,98', //绵阳市
        '5108,99', //广元市
        '5109,100', //遂宁市
        '5110,102', //内江市
        '5111,107', //乐山市
        '5113,104', //南充市
        '5114,291', //眉山市
        '5115,96', //宜宾市
        '5116,108', //广安市
        '5117,113', //达州市
        '5118,114', //雅安市
        '5119,101', //巴中市
        '5120,109', //资阳市
        '5132,457', //阿坝藏族羌族自治州
        '5133,417', //甘孜藏族自治州
        '5134,479', //凉山彝族自治州
        //52,贵州
        '5201,2', //贵阳市
        '5202,4', //六盘水市
        '5203,59', //遵义市
        '5204,424', //安顺市
        '5222,422', //铜仁地区
        '5223,588', //黔西南布依族苗族自治州
        '5224,426', //毕节地区
        '5226,61', //黔东南苗族侗族自治州
        '5227,3', //黔南布依族苗族自治州
        //53,云南
        '5301,117', //昆明市
        '5303,339', //曲靖市
        '5304,123', //玉溪市
        '5305,438', //保山市
        '5306,335', //昭通市
        '5307,342', //丽江市
        '5308,666', //普洱市
        '5308,662', //普洱市
        '5309,350', //临沧市
        '5323,124', //楚雄彝族自治州
        '5325,337', //红河哈尼族彝族自治州
        '5326,437', //文山壮族苗族自治州
        '5328,668', //西双版纳傣族自治州
        '5329,334', //大理白族自治州
        '5331,669', //德宏傣族景颇族自治州
        '5333,671', //怒江傈僳族自治州
        '5334,672', //迪庆藏族自治州
        //54,西藏
        '5401,466', //拉萨市
        '5421,678', //昌都地区
        '5422,677', //山南地区
        '5423,516', //日喀则地区
        '5424,655', //那曲地区
        '5425,691', //阿里地区
        '5426,656', //林芝地区
        //61,陕西
        '6101,165', //西安市
        '6102,271', //铜川市
        '6103,273', //宝鸡市
        '6104,277', //咸阳市
        '6105,275', //渭南市
        '6106,401', //延安市
        '6107,276', //汉中市
        '6108,278', //榆林市
        '6109,272', //安康市
        '6110,274', //商洛市
        //62,甘肃
        '6201,166', //兰州市
        '6202,286', //嘉峪关市
        '6203,343', //金昌市
        '6204,309', //白银市
        '6205,308', //天水市
        '6206,283', //武威市
        '6207,285', //张掖市
        '6208,307', //平凉市
        '6209,284', //酒泉市
        '6210,281', //庆阳市
        '6211,282', //定西市
        '6212,344', //陇南市
        '6229,346', //临夏回族自治州
        '6230,673', //甘南藏族自治州
        //63,青海
        '6301,139', //西宁市
        '6321,652', //海东地区
        '6322,682', //海北藏族自治州
        '6323,685', //黄南藏族自治州
        '6325,676', //海南藏族自治州
        '6326,688', //果洛藏族自治州
        '6327,659', //玉树藏族自治州
        '6328,608', //海西蒙古族藏族自治州
        //64,宁夏
        '6401,140', //银川市
        '6402,472', //石嘴山市
        '6403,395', //吴忠市
        '6404,396', //固原市
        '6405,480', //中卫市
        //65,新疆
        '6501,467', //乌鲁木齐市
        '6502,317', //克拉玛依市
        '6521,310', //吐鲁番地区
        '6522,312', //哈密地区
        '6523,311', //昌吉回族自治州
        '6527,318', //博尔塔拉蒙古自治州
        '6528,499', //巴音郭楞蒙古自治州
        '6529,315', //阿克苏地区
        '6530,653', //克孜勒苏柯尔克孜自治州
        '6531,384', //喀什地区
        '6532,386', //和田地区
        '6540,520', //伊犁
        '6540,660', //伊犁哈萨克自治州
        '6542,563', //塔城地区
        '6543,383', //阿勒泰地区
        '659001,280', //石河子市
        '659002,692', //阿拉尔市
        '659003,693', //图木舒克市
        '659004,661' //五家渠市
    ]}.a;

    return mount[_funName] = cmapIDs;
})(BID);




































/*
地图辅助工具包
城市ID转换，获取城市数据等
*/
(function (ecmpData, ecmpDataPts, mount) {
    mount = mount || window;
    var _funName = 'cMapUtil',
        cmapIDs = mount.cmapIDs();
    var cMapUtil = function () {
        if(!(this instanceof cMapUtil)){
            return new cMapUtil();
        }
    },
    getEid = cMapUtil.getEid = function (pid) {
        //两个系统id互转，中国互转都为'0'，无对应id则返回''，指系id转ec系id
        if(pid === '0'){return '0';}
        return cmapIDs.p2e[pid] || '';
    },
    getPid = cMapUtil.getPid = function (eid) {
        //两个系统id互转，中国互转都为'0'，无对应id则返回''，ec系id转指系id
        if(eid === '0'){return '0';}
        return cmapIDs.e2p[eid] || '';
    };

    //按 eid 获取城市数据，必要时请先使用上面的id转换器获得 eid
    var getCityDatas = cMapUtil.getCityDatas = function (ecmpID, contextID) {
        var cityDatas;
        if(contextID){
            cityDatas = ecmpData[contextID].Ct[ecmpID];
        }else{
            cityDatas = ecmpData[ecmpID];
        }
        if(!cityDatas){
            for(var key in ecmpData){
                if(cityDatas = ecmpData[key].Ct[ecmpID]){break;}
            }
        }
        if(cityDatas && typeof cityDatas.Gc === 'string'){
            cityDatas.Gc = getPoints(cityDatas.Gc);
        }
        return cityDatas;
    };

    var getCityPoint = cMapUtil.getCityPoint = function (ecmpID) {
        if(ecmpDataPts['0']){return ecmpDataPts[ecmpID];}
        var cityIDs = ecmpDataPts.cityIDs.split(',');
        var cityPts = ecmpDataPts.cityPts.split(',');
        for(var i = cityIDs.length; i--;){
            ecmpDataPts[cityIDs[i]] = [+cityPts[i * 2], +cityPts[i * 2 + 1]];
        }
        return ecmpDataPts[ecmpID];
    };

    //用字符串表示的一组多边形，转换成坐标数组表示
    var getPoints = cMapUtil.getPoints = function (stringGc) {
        var pointsGc = [];
        var xy4 = stringGc.split(',');                      //只用一种分隔符，x、y交替存放，只用split一次
        var item = '';
        var xys = [];
        for(var i = 0, len = xy4.length; i < len; i++){
            item = xy4[i];
            if(item.length < 4){
                xys.push(item);
            }else{
                if(item.charAt(0) === '-'){
                    [].push.apply(xys, item.slice(1).split(''));
                }else{
                    for(var j = 0, lenj = item.length; j < lenj; j +=2){
                        xys.push(item.slice(j, j + 2));
                    }
                }
            }
        }
        var prevX = parseInt(xys[0], 36);
        var prevY = parseInt(xys[1], 36);
        var cX = 0, cY = 0;
        pointsGc.push([prevX, prevY]);
        var i = 0, len = xys.length;
        while((i += 2) < len){
            cX = parseInt(xys[i], 36);
            cY = parseInt(xys[i + 1], 36);
            if(isNaN(cX)){
                pointsGc.push(['M', 'M']);
                continue;
            }
            prevX += cX % 2 ? -(cX + 1) / 2 : cX / 2;
            prevY += cY % 2 ? -(cY + 1) / 2 : cY / 2;
            pointsGc.push([prevX, prevY]);
        }
        return pointsGc;
    };

    //将坐标数组联接成path路径点信息
    var getPaths = cMapUtil.getPaths = function (pointsGc, alsoVml) {
        var pathsGc = {};
        var pathParts = ['M', pointsGc[0][0], pointsGc[0][1], 'L']; //第一个坐标点用M(ove)，然后一个L(ine)，再后面就不需要指令了
        var i = 0, item = 0;
        while(item = pointsGc[++i]){                                //从第二项开始，遍历后面的点
            if(isNaN(item[0])){
                i += 1;
                pathParts.push('M', pointsGc[i][0], pointsGc[i][1], 'L');
                continue;
            }
            pathParts.push(item[0] + ' ' + item[1]);
        }
        pathsGc.svg = pathParts.join(' ');
        if(!alsoVml){return pathsGc;}
        var vmlZoom = 21600;
        var pathParts = ['m' + (pointsGc[0][0] * vmlZoom | 0) + ',' + (pointsGc[0][1] * vmlZoom | 0) + ' l' + (pointsGc[1][0] * vmlZoom | 0) + ',' + (pointsGc[1][1] * vmlZoom | 0)];
        var i = 1, item = 0;
        while(item = pointsGc[++i]){                                //从第三项开始
            if(isNaN(item[0])){
                i += 1;
                pathParts[pathParts.length - 1] = pathParts[pathParts.length - 1] + ' m' + (pointsGc[i][0] * vmlZoom | 0);
                pathParts.push((pointsGc[i][1] * vmlZoom | 0) + ' l' + (pointsGc[i + 1][0] * vmlZoom | 0));
                pathParts.push((pointsGc[i + 1][1] * vmlZoom | 0));
                i += 1;
                continue;
            }
            pathParts.push((item[0] * vmlZoom | 0), (item[1] * vmlZoom | 0));
        }
        pathsGc.vml = pathParts.join(',') + ' e';
        return pathsGc;
    };

    //平移，并缩放一组多边形，先平移，后缩放
    var moveXYz = cMapUtil.moveXYz = function (dataGc, oXY, zoom) {
        zoom = zoom || 1;
        var oX = oXY[0], oY = oXY[1];
        var returnGc = [];
        mount.each(dataGc, function (index, item) {
            returnGc.push([
                +((item[0] + oX) * zoom).toFixed(1),
                +((item[1] + oY) * zoom).toFixed(1)
            ]);
        });
        return returnGc;
    };

    //求最大值和最小值
    var getMMN = cMapUtil.getMMN = function (valArr) {
        //return [Math.min.apply(Math, valArr), Math.max.apply(Math, valArr)];//我们需要区分 值为0 和 值不存在，所以数组中会出现 NaN
        //实际上不用考虑负值，和超大正值
        var min = 2000000000, max = 0;
        for(var i = valArr.length; i--;){
            var item = valArr[i];
            if(item > max){max = item;}
            if(item < min){min = item;}
        }
        return [min, max];
    };
    //最值离心归一化
    var getMMO = cMapUtil.getMMO = function (valArr, mmnArr) {
        mmnArr = mmnArr || getMMN(valArr);
        var arr = [];
        for(var i = valArr.length; i--;){
            arr[i] = valArr[i] / mmnArr[1] || 0;            //最大值为 0 的情况
            if(valArr[i] !== valArr[i]){arr[i] = NaN;}
        }
        return arr;
    };
    //最值跨度归一化
    var getMMK = cMapUtil.getMMK = function (valArr, mmnArr) {
        mmnArr = mmnArr || getMMN(valArr);
        var minVal = mmnArr[0],
            maxVal = mmnArr[1],
            span = maxVal - minVal,
            arr = [];
        for(var i = valArr.length; i--;){
            if(span == 0){                                  //当最大值等于最小值时
                arr[i] = maxVal == 0 ? 0 : 1;               //区分最大值是否为 0
            }else{
                arr[i] = (valArr[i] - minVal) / span;
            }
        }
        return arr;
    };

    mount.sCopy(cMapUtil.prototype, cMapUtil);
    return mount[_funName] = cMapUtil;
})(ecmpData, ecmpDataPts, BID);









/*
地图主体
*/
(function (mount) {
    mount = mount || window;
    var _funName = 'cMap',
        cMapUtil = mount.cMapUtil,
        sCopy = mount.sCopy;
    var cMap = function (opts) {
        return new cMap_fn(opts);
    };

    var cMap_fn = cMap.fn = function (opts) {               //必须指定opts，其中必须指定divID
        this.tagIndex = -1;
        this.tabVal = '';
        this.dataCache = {};
        this.opts = opts;
        this.sets = {                                       //Raphael产生的各种对象，存于这里，需要仔细管理与回收
            stsExtp: {},                //补充图
            stsTitl: {},                //标题栏
            stsTags: {},                //图例区
            stsBars: {},                //条图区
            stsVals: {},                //值域区
            stsCity: {},                //城市轮廓
            stsText: {},                //文字标注
            stsPoint: {},               //城市点标
            stsLayer: {}                //图层基准
        };
        this.xys = {};                                      //各种坐标、偏移量等
        this.paper = Raphael(opts.divID);                   //必须指定divID
        opts.city = sCopy(opts.city || {}, this.OPTS.city);
        opts.cityP = sCopy(opts.cityP || {}, this.OPTS.cityP);
        this.paper.gsid = BID.gsid();
    };

    cMap_fn.OPTS = {                                        //主要配置项的默认值
        city: {fill: '#aa8866', stroke: '#fefefe', 'stroke-width': 1},
        cityP: {fill: '#fe7727', stroke: '#ffffff', 'stroke-width': 3, 'stroke-opacity': 0.5},
        padds: {
            title: 66,                  //标题栏高度
            left: 20,                   //除标题栏外，左侧留白
            right: 25,                  //右侧留白
            bottom: 20,                 //底部留白
            tagHig: 0,                  //tag 区（图例）高度
            barWid: 260,                //条图区宽度
            barLft: 30,                 //条图区与地图区最小间隔
            valHig: 40                  //左下角值域区高度
        }
    };

    cMap_fn.paperSize = function () {
        var holder = T('#' + this.opts.divID);
        var width  = holder.width();
        var height = holder.height();
        if (this.width != width || this.height != height) {
            this.width  = width;
            this.height = height;
            this.paper.setSize(width, height);
            this.drawMain(this.opts.outerCity);
        }
        return this;
    };

    //地图初始化计算，主要是尺寸、位置、放大率等
    cMap_fn.drawMain = function (outerCity) {
        outerCity = outerCity || '0';               //请指定 outerCity 的 ID
        var paper = this.paper,
            width = paper.width,
            height = paper.height,
            cityDatas = cMapUtil.getCityDatas(outerCity),
            sets = this.sets,
            xys = this.xys,
            opts = this.opts;
        opts.padds = sCopy((opts.padds || {}), this.OPTS.padds);
        var padds = opts.padds;
        if(0 && width > 740){
            var morePadding = (width - 740) * 0.4 / 2;
            if(height > 520){morePadding = (width - 740) * (0.4 * 520 / height) / 2;}
            padds.left += morePadding;
            padds.right += morePadding;
        }
        padds.width = width;
        padds.height = paper.height;
        var mapLeft = padds.left,                   //整个图中，只有一部分用于显示地图，其它地方留白、标题、图例、右侧条图等
            mapTop = padds.title + padds.tagHig,
            mapRight = padds.right + padds.barWid + padds.barLft,
            mapBottom = padds.bottom + padds.valHig,
            mapWidth = paper.width - mapLeft - mapRight,
            mapHeight = paper.height - mapTop - mapBottom;
        if(opts.outerCity != outerCity){            //outerCity 改变
            opts.outerCity = outerCity;
            sets.stsExtp.ctShadow && sets.stsExtp.ctShadow.hide();
            this.tipHide();                         //tip 没在 paper 里面而是 div 需要单独隐藏
        }
        xys.mapLeft = mapLeft;
        xys.mapWidth = mapWidth;
        xys.mapTop = mapTop;
        xys.mapHeight = mapHeight;
        xys.Wd = cityDatas.Wd;                      //主轮廓宽度
        xys.Hg = cityDatas.Hg;                      //主轮廓高度
        xys.Po = [-cityDatas.Po[0], -cityDatas.Po[1]];//基准偏移
        var zoomZ = Math.min(mapWidth / xys.Wd, mapHeight / xys.Hg);//全局放大率
        xys.Po[0] += mapLeft / zoomZ + (mapWidth - xys.Wd * zoomZ) / 2 / zoomZ;
        xys.Po[1] += mapTop / zoomZ + (mapHeight - xys.Hg * zoomZ) / 2 / zoomZ;
        xys.Zo = zoomZ;
        if(this.varsBars){                                  //缩放后，调整 magic_scroll 区高度
            var scrollBox = T('#' + this.varsBars.divID + ' .scrolls'),
                iniScrols = BID.createScroll.inis,
                scrollBoxHeight = height - padds.title - padds.tagHig - padds.bottom - 10 * 2 - 12 * 2;
            scrollBox.height(scrollBoxHeight);
            if(iniScrols && iniScrols[scrollBox[0].id]){
                iniScrols[scrollBox[0].id].update();
                scrollBox.children().height(scrollBoxHeight);//这似乎是 magic 一个bug，update 之后还需要修改这个高度
            }
        }
        (this.sets.stsExtp['noData'] || (
            this.sets.stsExtp['noData'] = paper.text(0, 0, mount.sTips['noData']).hide()
        )).attr(mount.sTips['noDataAttr']);
        return this;
    };


    var areaCode = {
        // 区域
        part: {
            '东北': [
                '辽宁',
                '黑龙江',
                '吉林'
            ],
            '华东': [
                '上海',
                '江苏',
                '浙江',
                '山东',
                '江西',
                '福建',
                '安徽'
            ],
            '华中': [
                '湖北',
                '湖南',
                '河南'
            ],
            '华北': [
                '北京',
                '天津',
                '河北',
                '山西',
                '内蒙古'
            ],
            '华南': [
                '广东',
                '海南',
                '台湾',
                '广西'
            ],
            '西北': [
                '青海',
                '宁夏',
                '陕西',
                '甘肃',
                '新疆'
            ],
            '西南': [
                '重庆',
                '四川',
                '云南',
                '贵州',
                '西藏'
            ]
        },

        // 省
        prov: {
            '北京': '911',
            '上海': '910',
            '广东': '913',
            '天津': '923',
            '河南': '927',
            '四川': '914',
            '重庆': '904',
            '江苏': '916',
            '湖北': '906',
            '浙江': '917',
            '福建': '909',
            '黑龙江': '921',
            '山东': '901',
            '陕西': '924',
            '河北': '920',
            '辽宁': '907',
            '吉林': '922',
            '云南': '915',
            '新疆': '926',
            '广西': '912',
            '山西': '929',
            '湖南': '908',
            '江西': '903',
            '安徽': '928',
            '内蒙古': '905',
            '甘肃': '925',
            '海南': '930',
            '贵州': '902',
            '宁夏': '919',
            '青海': '918',
            '西藏': '932',
            '台湾': '931',
            '香港': '933',
            '澳门': '934'
        }
    };


    var provPartMaplist = (function () {
        var prov = areaCode.prov;
        var part = areaCode.part;
        var o = {};
        _.each(part, function (cityList, partName) {
            _.each(cityList, function (cityName) {
                if (prov[cityName]) {
                    o[prov[cityName]] = partName;
                }
            });
        });
        return o;
    })();




    //数据格式化
    cMap_fn.setDatas = function (datas) {
        var theDatas = this.datas = {},
            tagItems = theDatas.tagItems = [],              //图例项
            mapDatas = theDatas.mapDatas = [],              //每个对比项下都有省市两种模式下的主数据，在地图主区展示，省模式下为面填充，市模式下为圆圈
            barDatas = theDatas.barDatas = [];              //每个对比项下都有省市两种模式下的条图数据

		// 删除错误数据
		try{
            for (var i = 0, len = datas.length; i < len; i++) {
                var cdata = datas[i];
                if (cdata['city']['657']) {
                    delete cdata['city']['657'];
                }
                if (cdata['city_real']['657']) {
                    delete cdata['city_real']['657'];
                }
                if (cdata['prov']['940']) {
                    delete cdata['prov']['940'];
                }
                if (cdata['prov_real']['940']) {
                    delete cdata['prov_real']['940'];
                }
            }
		}catch(e) {}

		this.sourceDatas = datas;

        mount.each(datas, function (tagIndex, tagData) {    //遍历各对比项
            var curTagColor = mount.getColor(tagIndex),     //当前对比项的颜色
                cityIDname = mount.cityIDname();            //城市 id 与名称对应包
            tagItems.push({text: tagData.key, color: curTagColor});
            mapDatas.push({});
            barDatas.push({});
            mount.each(['prov', 'city'], function (pcIndex, pcName) {//每个对比项下，有省条图和市条图两份条图数据
                var items = tagData[pcName],
                    tmp2Sort = [],                          //用于数据排序，原数据为{省市ID: 数据值}
                    barData = [];
                for(var key in items){tmp2Sort.push({pid: key, eid: cMapUtil.getEid(key), val: +items[key], val_real: +tagData[pcName + '_real'][key]});}
                tmp2Sort.sort(function (a, b) {return b.val_real - a.val_real});//从大到小排序，val 与 val_real 的差异，一行注释说不清楚
                for(var i = tmp2Sort.length; i--;){
                    var tmpItem = tmp2Sort[i],
                        bar_i_vals = [tmpItem.val],
                        bar_i_colors = [curTagColor];
                    mount.each(datas, function (tagJndex, tagJata) {
                        if(tagJndex == tagIndex){return;}
                        if(+tagJata[pcName][tmpItem.pid] >= 0){
                            bar_i_vals.push(+tagJata[pcName][tmpItem.pid]);
                        }else{
                            bar_i_vals.push(NaN);           //后续绘图中需要区分 无值 和值为0
                        }
                        //bar_i_vals.push(+(tagJata[pcName][tmpItem.pid] || 0));
                        bar_i_colors.push(mount.getColor(tagJndex));
                    });
                    barData[i] = {pid: tmpItem.pid, text: cityIDname.getName(tmpItem.pid), vals: bar_i_vals, colors: bar_i_colors};
                    //[i]是条图中的一组，这一组内包含多个对比项，并且图例区的当前对比项排在最前面，其它图例对比项在此组[i].pid城市下的值依次填入
                    //如果[i].pid这个城市在其它图例对比项下没有值，则补零
                    //然后，每个图例对比项下都有一组这样的barData，其中的[i]组条图里都包含来自其它图例对比项[i].pid城市的值
                }
                barDatas[tagIndex][pcName] = barData;
            });
            mount.each(['prov_real', 'city_real'], function (pcIndex, pcName) {//每个对比项下，有省色块图和市圆圈图两份数据
                var items = tagData[pcName],
                    tmp2Sort = [];                          //用于数据排序，原数据为{省市ID: 数据值}
                for(var key in items){tmp2Sort.push({pid: key, eid: cMapUtil.getEid(key), val: +items[key]});}
                tmp2Sort.sort(function (a, b) {return b.val - a.val});//从大到小排序
                mapDatas[tagIndex][pcName] = tmp2Sort;
            });
        });

        var areaDatas = theDatas.areaDatas = [];
        var provDataMap;
        var areaData;
        var sum;
        var cityCode;

        _.each(datas, function (data) {
            provDataMap = data['prov_real'];
            areaData = {};
            _.each(areaCode.part, function (cityList, partName) {
                sum = 0;
                _.each(cityList, function (city) {
                    cityCode = areaCode.prov[city];
                    if (cityCode && provDataMap[cityCode]) {
                        sum += parseInt(provDataMap[cityCode], 10);
                    }
                });
                areaData[partName] = sum;
            });
            areaDatas.push(areaData);
        });

        return this;
    };


    //绘一批城市轮廓
    //[{eid: eid, val: val}]
    cMap_fn.drawCitys = function (curTagIndex, curTabVal) {

        var curDatas = this.datas.mapDatas[curTagIndex] || {},
            datas = curDatas[curTabVal + '_real'];

        if (curTabVal === 'area') {
            datas = [];

            var areaname;
            var curAreaData = this.datas.areaDatas[curTagIndex];

            // 每个城市的val = 当前区域的值
            _.each(curDatas['prov_real'], function (item) {
                areaname = provPartMaplist[item.pid];
                if (areaname) {
                    datas.push({
                        eid: item.eid,
                        pid: item.pid,
                        val: curAreaData[areaname]
                    });
                }
            });
        }

        var noDataColor = '#e8e8e8',
            curTagColor = mount.getColor(curTagIndex),
            self = this,
            paper = this.paper,
            opts = this.opts,
            sets = this.sets,
            xys = this.xys,
            padds = opts.padds,
            cColor = this.cColor,
            outerCity = opts.outerCity,
            dataLen = datas.length,
            valObj = {},
            mmnArr = [];
        sets.stsCity['eid'] = {};
        if(!sets.stsCity['']){
            sets.stsCity[''] = [];
            this.care('cityHover', function (cityID) {
                if (this.tabVal == 'area') {return;}
                if(this.tabVal === 'city' && this.opts.outerCity == '0'){return;}
                var cityPath = sets.stsCity['eid'][cityID];
                if(Raphael.svg){cityPath.insertBefore(sets.stsLayer.cts).attr({'stroke-opacity': 0});}
                sets.stsExtp.ctShadow.insertBefore(cityPath).transform('t1.5,1.5');
                if(!Raphael.svg){
                    sets.stsExtp.ctShadow.node.path = cityPath.node.path;
                }else{
                    sets.stsExtp.ctShadow.node.setAttribute('d', cityPath.node.getAttribute('d'));
                }
                sets.stsExtp.ctShadow.show();
            }).care('cityHout', function (cityID) {
                if (this.tabVal == 'area') {return;}
                if(this.tabVal === 'city' && this.opts.outerCity == '0'){return;}
                if(!sets.stsCity['eid']){return;}
                var cityPath = sets.stsCity['eid'][cityID];
                if(!cityPath){return;}
                sets.stsExtp.ctShadow.hide();
                cityPath.attr({'stroke-opacity': 1});
            });
        }
        var stsCityArr = sets.stsCity[''];
        var createPath = function () {
            return paper.path().hover(function () {
                if (self.tabVal == 'area') {return;}
                if(self.opts.outerCity == '0' && self.tabVal == 'city'){return;}//全国城市 模式下省轮廓不响应 hover
                self.raise('cityHover', self, this.data('cityID'));
            }, function () {
                if (self.tabVal == 'area') {return;}
                if(self.opts.outerCity == '0' && self.tabVal == 'city'){return;}//全国城市 模式下省轮廓不响应 hover
                self.raise('cityHout', self, this.data('cityID'));
            }).click(function () {
                this.stop();
                if(self.opts.outerCity == '0' && self.tabVal == 'city'){return;}
                self.raise('cityClick', self, this.data('cityID'));
            });
        };
        for(var i = dataLen; i--;){
            mmnArr[i] = +datas[i].val;//准备最值
            valObj[datas[i].eid] = {val: mmnArr[i], index: i};//方便查值
        }
        mmnArr = cMapUtil.getMMN(mmnArr);                   //求最值，未做归一化
        var minLow = (mmnArr[1] - mmnArr[0]) / 6;           //在计算颜色时，最小值不要是0，0对应纯白色，即颜色分六等，取值为1-6而不是0-5
        var index = -1;
        mount.each(cMapUtil.getCityDatas(outerCity).Ct, function (ikey) {
            index += 1;
            var pathOpts = {'fill': noDataColor, 'cursor': 'default'};//空数据时颜色，需指定为灰色
            if(dataLen && valObj[ikey] && typeof(valObj[ikey].val) == 'number'){//有数据，但不保证每个城市都有数据
                pathOpts.fill = cColor(
                    curTagColor,
                    Math.pow(mmnArr[1] + minLow, 2) - Math.pow(mmnArr[1] - valObj[ikey].val, 2),
                    Math.pow(mmnArr[1] + minLow, 2),
                    Math.pow(mmnArr[0], 2)
                );
                //线性取色公式为cColor(curTagColor, valObj[ikey].val + minLow, mmnArr[1] + minLow, mmnArr[0])，即(curVal, max, min)。
                //改为上凸曲线取色 y = n^2 - (n-x)^2，即较大的值取较亮的色
                pathOpts.cursor = 'pointer';
            }
            if(curTabVal == 'city' && opts.outerCity == '0'){//全国城市 模式下全部置灰
                pathOpts.fill = noDataColor;
                pathOpts.cursor = 'default';
            }
            if(self.tabVal === 'city' || self.opts.outerCity != '0' || !cMapUtil.getPid(ikey) || self.opts.userIn == 'Industry'){pathOpts.cursor = 'default';}
            var R_path,
                cityDatas = cMapUtil.getCityDatas(ikey, outerCity),
                Po = [cityDatas.Po[0] + xys.Po[0], cityDatas.Po[1] + xys.Po[1]],//按outerCity平移
                cityCenter = cMapUtil.moveXYz([cityDatas.Pt], xys.Po, xys.Zo)[0],//平移并缩放
                polysPoints = cMapUtil.moveXYz(cityDatas.Gc, Po, xys.Zo),//平移并缩放
                polysPaths = cMapUtil.getPaths(polysPoints, !Raphael.svg);
            pathOpts = sCopy(pathOpts, opts.city);
            if(stsCityArr[index]){
                R_path = stsCityArr[index].stop();
            }else{
                R_path = stsCityArr[index] = createPath();
            }
            R_path.attr(pathOpts).data('cityID', ikey).data('attr', pathOpts).attrs.path = polysPaths.svg;
            if(!Raphael.svg){
                R_path.node.path = polysPaths.vml;
            }else{
                R_path.node.setAttribute('d', polysPaths.svg);
            }
            sets.stsCity['eid'][ikey] = R_path.data('index', ((valObj[ikey] && typeof(valObj[ikey].val) == 'number') ? valObj[ikey].index : '暂无数据')).data('center', cityCenter).show();
        });
        if(!dataLen){index = -1;}                           //暂无数据时，隐藏城市轮廓
        for(var i = stsCityArr.length; i-- > index + 1;){
            stsCityArr[i].stop().hide();
        }
        // 南海诸岛
        if(outerCity == '0' || outerCity == '46'){
            // var p_sisImg = cMapUtil.moveXYz([[47548 + 4000, 37463 - 3000]], xys.Po, xys.Zo)[0];
            // if(outerCity == '46'){p_sisImg = cMapUtil.moveXYz([[36837 + 600, 43413 + 300]], xys.Po, xys.Zo)[0];}
            // (sets.stsExtp['sisImg'] || (
            //     sets.stsExtp['sisImg'] = paper.image(PPval.imgsUrl + 'cmapsis.png', 0, 0, 56, 80).hide()//南海诸岛图片
            // )).attr({'x': p_sisImg[0], 'y': p_sisImg[1], width: 56 * xys.Zo * 120, height: 80 * xys.Zo * 120}).show();
            var p_sisImg;
            var zoomFlag = 1;
            if (outerCity == '0') {
                p_sisImg = cMapUtil.moveXYz([[47548 + 4000, 37463 - 3000]], xys.Po, xys.Zo)[0];
                zoomFlag = 1.2;
            }
            else if (outerCity == '46') {
                p_sisImg = cMapUtil.moveXYz([[36837 + 1000, 43413 - 200]], xys.Po, xys.Zo)[0];
                zoomFlag = 1.8;
            }
            (sets.stsExtp['sisImg'] || (
                sets.stsExtp['sisImg'] = paper.image(PPval.imgsUrl + 'southsea.png', 0, 0, 59, 85).hide()//南海诸岛图片
            )).attr({'x': p_sisImg[0], 'y': p_sisImg[1], width: 59 * zoomFlag, height: 85 * zoomFlag}).show();
        }
        else if(sets.stsExtp['sisImg']){
            sets.stsExtp['sisImg'].hide();
        }
        // 钓鱼钓
        if(outerCity == '0'){
            var p_twImg= cMapUtil.moveXYz([[47248 - 4800, 37463 - 3250]], xys.Po, xys.Zo)[0];
            (sets.stsExtp['twImg'] || (
                sets.stsExtp['twImg'] = paper.image(PPval.imgsUrl + 'taiwan.png', 0, 0, 74, 60).hide()//南海诸岛图片
            )).attr({'x': p_twImg[0], 'y': p_twImg[1], width: 74, height: 60}).toBack().show();
        }
        else if(sets.stsExtp['twImg']){
            sets.stsExtp['twImg'].hide();
        }
        if(!sets.stsExtp.ctShadow){sets.stsExtp.ctShadow = paper.path().attr({'fill': '#888888', 'stroke': '#888888', 'stroke-width': 3, 'opacity': 0.4});}//城市轮廓 hover 阴影
        if(!sets.stsLayer.cts){sets.stsLayer.cts = paper.path();}     //城市轮廓层基准
        return this;
    };
/*
if(opts.outerCity === '0' && (cityDatas.Nm == '香港' || cityDatas.Nm == '澳门')){
    var x_txt = cityCenter[0], y_txt = cityCenter[1];
    if(cityDatas.Nm === '香港'){x_txt += 20;}
    if(cityDatas.Nm === '澳门'){y_txt += 15;}
    var opt_txt = {'cursor': 'pointer'};
    paper.text(x_txt, y_txt, cityDatas.Nm).attr(opt_txt).data('cityID', cityID).click(function () {
        self.raise('cityClick', this, this.data('cityID'));
    });
}
*/

    //直接隐藏 tip 并为下次显示、渐隐作准备
    cMap_fn.tipHide = function (cityID) {
        var vars = this.varsTip || (this.varsTip = {});
        clearTimeout(vars.timer);
        T('#' + vars.divID).hide().stop().css({opacity: 1});
    };

    //显示 tip
    cMap_fn.tipCity = function (cityID, curTabVal) {//参数指示当前显示状态是 省色块 还是 市圆圈
        var self = this,
            opts = this.opts,
            outerCity = opts.outerCity,
            sets = this.sets,
            xys = this.xys,
            vars = this.varsTip || (this.varsTip = {}),
            oBox;

        if (curTabVal === 'area') {return;}

        var setFadeOut = function () {
            vars.timer = setTimeout(function () {
               vars.cityID = '';
                T('#' + vars.divID).fadeOut();
            }, 1000);
        };
        if(!vars.divID){
            oBox = T('<div class="tip4map"><div class="titl"></div><div class="cont"></div><div class="arrow arrDown"></div></div>').hide().appendTo(T('#' + opts.divID).parent()).css({
                left: xys.mapLeft + xys.mapWidth / 2,
                top: xys.mapTop + xys.mapHeight / 2
            }).mouseenter(function () {
                clearTimeout(vars.timer);
                self.raise('cityHover', self, vars.cityID);
            }).mouseleave(function () {
                self.raise('cityHout', self, vars.cityID);
            });
            vars.divID = BID.gsid(oBox[0]);
        }else{
            oBox = T('#' + vars.divID);
        }
        if(!cityID){setFadeOut(); return;}else{clearTimeout(vars.timer);}
        if(cityID == vars.cityID){
            oBox.stop(true).css({opacity: 1}).show();
        }
        vars.cityID = cityID;
        var cityPath = sets['stsCity'];
        var pid = cMapUtil.getPid(cityID);
        var cityName = mount.cityIDname().getName(pid) || cMapUtil.getCityDatas(cityID).Nm;
        if(outerCity == '0' && curTabVal === 'city'){cityPath = sets['stsPoint'];}
        cityPath = cityPath['eid'][cityID];
        if(!cityPath){
            oBox.hide();
            return;
        }
        var cityIndex = cityPath.data('index'),
            cityCenter = cityPath.data('center'),
            tipLeft = cityCenter[0] - 57,
            tipTop = cityCenter[1] + 25;
        if(tipTop > xys.mapTop + xys.mapHeight / 2){//tip 箭头朝上朝下判断
            tipTop -= 115;
            oBox.find('.arrow').removeClass('arrUp').addClass('arrDown');
        }else{
            oBox.find('.arrow').removeClass('arrDown').addClass('arrUp');
        }
        oBox.find('.titl').html(mount.subStr(cityName, 12));
        oBox.find('.cont').html('排名： ' + (cityIndex >= 0 ? (cityIndex + 1) : cityIndex));
        oBox.stop(true).css({opacity: 1}).show().animate({left: tipLeft, top: tipTop});
        return this;
    };

    //绘一批城市点，考虑实际排序逻辑复杂，需要先排好序，再来显示
    cMap_fn.drawPoints = function (curTagIndex, curTabVal) {
        var curDatas = this.datas.mapDatas[curTagIndex] || {},
            datas = curDatas[curTabVal + '_real'];
        if(curTabVal != 'city' || this.opts.outerCity != '0'){datas = [];}//当且仅当 全国城市 模式才绘城市点，全国省 省辖市 模式均不绘城市点
        var topN = 20,
            curTagColor = mount.getColor(curTagIndex),
            self = this,
            paper = this.paper,
            xys = this.xys,
            opts = this.opts,
            stsPoint = this.sets.stsPoint,
            outerCity = opts.outerCity,
            dataLen = datas.length,
            stsPointArr = stsPoint[''],
            stsPointObj = {},
            valArr = [],
            pointOpts;
        if(!stsPointArr){
            stsPointArr = stsPoint[''] = [];
            this.care('cityHover', function (eid) {
                var R_point = stsPoint['eid'][eid];
                if(!R_point){return;}
                var attr = R_point.data('attr');
                R_point.attr({'stroke-opacity': 1});
            }).care('cityHout', function (eid) {
                var R_point = stsPoint['eid'][eid];
                if(!R_point){return;}
                R_point.attr(R_point.data('attr'));
            });
        }
        var createPoint = function () {
            return paper.circle().hover(function () {
                var attr = this.data('attr');
                self.raise('cityHover', self, this.data('cityID'));
            }, function () {
                self.raise('cityHout', self, this.data('cityID'));
            });
        };
        for(var i = dataLen; i--;){valArr[i] = datas[i].val;}//准备最值与归一化
        if(dataLen > topN){valArr.length = dataLen = topN;} //先截掉超出 topN 的数据项，再做跨度归一化，以保证最小值为零并展示为最小圆圈
        valArr = cMapUtil.getMMK(valArr);
        var index = -1;
        mount.each(datas, function (jndex, jtem) {
            if(index + 1 >= topN){return 1;}
            index += 1;
            var R_point,
                cityPoint = cMapUtil.getCityPoint(jtem.eid, outerCity),
                cityCenter = cMapUtil.moveXYz([cityPoint], xys.Po, xys.Zo)[0];//平移并缩放
            if(stsPointArr[index]){
                R_point = stsPointArr[index].stop();
            }else{
                R_point = stsPointArr[index] = createPoint();
            }
            pointOpts = self.cStyle(valArr[index], curTagColor);
            pointOpts.cx = cityCenter[0];
            pointOpts.cy = cityCenter[1];
            R_point.attr(pointOpts).data('cityID', jtem.eid).data('data', jtem).data('attr', pointOpts);
            stsPointObj[jtem.eid] = R_point.data('index', jndex).data('center', cityCenter).show();
        });
        stsPoint['eid'] = stsPointObj;
        for(var i = stsPointArr.length; i-- > index + 1;){
            stsPointArr[i].stop().hide();
        }
        return this;
    };

    //绘bar条图区
/*
    cMap_fn.drawBars = function (curTagIndex, curTabVal) {return this;
        var datas = this.datas.barDatas[curTagIndex][curTabVal],
            paper = this.paper,
            outerCity = this.opts.outerCity,
            padds = this.opts.padds,
            sets = this.sets,
            stsBars = sets.stsBars,
            dataLen = datas.length,
            barCount = dataLen == 0 ? 0 : datas[0].vals.length,//对比项个数
            itemsCount = 10,            //topN
            txtLeft = 12,               //文字左留白
            barsLeft = 88,              //条图左起点
            widthLow = 1,               //0 值基线下移，保证 0 宽条图可见
            barsWidth = 140,            //最大条宽 - 最小条宽(2)
            barHeight = 6,              //单个条高
            itemHeight = 14,            //最小条目高度，即对比项为 1 项时
            itemMargin = 18,            //条目上间距
            itemsMargin = 11,           //首条上留白
            tabHeight = 24,             //tab 高度
            left = paper.width - padds.right - padds.barWid,
            top = padds.title + padds.tagHig,
            height = paper.height - top - padds.bottom,
            textOpts = {'fill': '#666666'};
        var mmnArr = [];//用于寻找数据中的最值
        if(dataLen > itemsCount){dataLen = datas.length = itemsCount;}//实际数据量多于 topN 的情况
        mount.each(datas, function (index, item) {
            var barVals = item.vals;
            for(var i = barVals.length; i--;){mmnArr.push(+barVals[i]);}
        });
        mmnArr = cMapUtil.getMMN(mmnArr);
        if(stsBars['']){stsBars[''].remove();}
        if(!dataLen){return;}
        paper.setStart();
        var tabPath = [[10,tabHeight], [10,0], [68,0], [68,tabHeight]];
        if(curTabVal === 'city' && outerCity == '0'){
            tabPath = cMapUtil.moveXYz(tabPath, [60, 0], 1);
        }
        tabPath.unshift([0,tabHeight]);
        tabPath.push([padds.barWid,tabHeight]);
        tabPath = cMapUtil.moveXYz(tabPath, [left, top + 1], 1);
        paper.path(cMapUtil.getPaths(tabPath).svg).attr({stroke: '#cccccc', 'stroke-width': 1});
        if(outerCity == '0'){
            paper.text(left + 40, top + 12, '省份').attr(textOpts);
            paper.text(left + 40 + 60, top + 12, '城市').attr(textOpts);
        }else{
            paper.text(left + 40, top + 12, '城市').attr(textOpts);
        }
        var bar1Margin = 3;                                 //对比项只有一个时，条上边留白
        textOpts = sCopy({'text-anchor': 'start'}, textOpts);
        if(barCount > 1){
            bar1Margin = 0;
            itemHeight = (barHeight + 1) * barCount;        //多项对比时，条目高度，条高 + 条间留白
        }
        mount.each(datas, function (index, item){
            var itemTop = top + tabHeight + itemsMargin + (itemMargin + itemHeight) * index;
            if(itemTop + itemMargin + itemHeight > paper.height - padds.bottom){return;}//剩下的可用高度不足以绘出这一组
            paper.text(left + txtLeft, itemTop + (itemHeight - 4) / 2, (index + 1) + '.' + (index < 9 ? ' ' : '') + mount.subStr(item.text, 8)).attr(textOpts);
            var valArr = cMapUtil.getMMO(item.vals, mmnArr);//归一化
            mount.each(item.vals, function (jndex) {
                if(jndex >= barCount){return;}
                paper.rect(left + barsLeft, itemTop + bar1Margin + (barHeight + 1) * jndex, 2 + valArr[jndex] * barsWidth + widthLow, 6).attr({'stroke-width': 0, 'fill': item.colors[jndex]});
            });
        });
        stsBars[''] = paper.setFinish();
        return this;
    };
*/

    var r;

    var arrMove = function (arr, index) {
	var item = arr.splice(index, 1);
	arr.unshift(item[0]);
	return arr;
    };

    //用div绘可交互的bar条图区，考虑实际排序逻辑复杂，需要先排好序，再来显示
    //数据格式：[{pid: cityPid, text: cityName, vals: [barVal], colors: [barColor]}]
    cMap_fn.divBars = function (curTagIndex, curTabVal) {

        var datas = this.datas.barDatas[curTagIndex][curTabVal];

        if (curTabVal === 'area') {
            var varsBars = this.varsBars || (this.varsBars = {});
            var scLi = T('#' + varsBars.divID).find('.scTab .scLi').removeClass('curr');
            scLi.eq(1).addClass('curr');//设置当前 tab 卡

            var areaDatas = this.datas.areaDatas;
            var areaNames = _.keys(areaCode.part);
            var colors = [];
            _.each(areaDatas, function (v, i) {
                colors.push(mount.getColor(i));
            });

            datas = [];

            var areaVals = {};
            _.each(areaDatas, function (areaData) {
                _.each(areaData, function (v, partname) {
                    if (!areaVals[partname]) {
                        areaVals[partname] = [];
                    }
                    areaVals[partname].push(v);
                });
            });
	    areaNames.sort(function (a, b) {
		return areaVals[b][curTagIndex] - areaVals[a][curTagIndex];
	    });

            _.each(areaNames, function (name) {
                datas.push({
                    colors: arrMove(colors, curTagIndex),
                    pid: '100',
                    text: name,
                    vals: arrMove(areaVals[name], curTagIndex)
                });
            });
        }

        var widthLow = 2,               //0 值基线下移，保证 0 宽条图可见
            barsWidth = 140,            //最大条宽 - 最小条宽
            itemsCount = 10,            //topN
            dataLen = datas.length,
            barCount = dataLen == 0 ? 0 : datas[0].vals.length,//对比项个数
            vars = this.varsBars || (this.varsBars = {}),
            opts = this.opts,
            outerCity = opts.outerCity,
            padds = opts.padds,
            oBox;

        var createHtml = function (itemsCount) {
            var sBar = '<div class="zbar"></div>',
                sBars = '<div class="zbars">' + sBar + sBar + sBar + sBar + sBar + '</div>',
                sTable = '<table><tr><td class="scRank"></td><td class="scName"></td><td>' + sBars + '</td></tr></table>',
                sItem = '<div class="items">' + sTable + '</div>',
                sHtml = ['<ul class="scTab"><li class="scLi" tabVal="prov">省份</li><li class="scLi" tabVal="area">区域</li><li class="scLi" tabVal="city">城市</li></ul>'];
            sHtml.push('<div class="scrolls" style="border-bottom:1px solid #e5e5e5;">');
            while(itemsCount--){sHtml.push(sItem);}
            sHtml.push('</div>');
            return sHtml.join('');
        };

        if(!vars.divID){//创建 div 及各种容器
            var self = this;
            oBox = T('<div class="bar4map"></div>').hide().html(createHtml(itemsCount)).appendTo(T('#' + opts.divID).parent());
            vars.divID = BID.gsid(oBox[0]);
            oBox.find('.scTab .scLi').click(function () {
                T(this).parent().find('.scLi').removeClass('curr');
                self.raise('tabClick', self, T(this).addClass('curr').attr('tabVal'));//tab 被点击（切换）时，通知主控作出响应
            });
            oBox.find('.items').mouseenter(function () {
                self.raise('cityHover', self, T(this).data('eid'), 'barItem');
            }).mouseleave(function () {
                self.raise('cityHout', self, T(this).data('eid'), 'barItem');
            });
            this.care('cityHover', function (eid, barItem) {
                var itemIndex = vars.eids[eid];
                var items = oBox.find('.items').removeClass('hover');
                items.eq(itemIndex).addClass('hover');
                if(itemIndex >= 0 && itemIndex <= 9 && barItem != 'barItem'){//将待高亮的项滚动到显示区内
                    var iScroll = BID.createScroll.inis[T('#' + vars.divID + ' .scrolls')[0].id],
                        elContent = T(iScroll.getElement('content')),
                        elWrapper = T(iScroll.getElement('wrapper')),
                        hgContent = elContent.height(),
                        hgWrapper = elWrapper.height();
                    if(hgContent <= hgWrapper){return;}
                    if(itemIndex >= 6){
                        elContent.stop().animate({'top': hgWrapper - hgContent}, function () {
                            iScroll.scrollToTop(); iScroll.scrollToBottom();
                            //哦汗，这里.update()无效，单.scrollToBottom()也无效，下同
                        });
                    }else if(itemIndex <= 2){
                        elContent.stop().animate({'top': 0}, function () {iScroll.scrollToBottom(); iScroll.scrollToTop();});
                    }
                }
            }).care('cityHout', function (eid) {
                oBox.find('.items').removeClass('hover');
            });
        }else{
            oBox = T('#' + vars.divID).hide();
        }
        if(!dataLen){
            this.sets.stsExtp['sisImg'].hide();
            this.sets.stsExtp['twImg'].hide();
            this.sets.stsExtp['noData'].attr({'x': this.paper.width / 2, 'y': this.xys.mapTop + this.xys.mapHeight / 2}).toFront().show();
            return;
        }else{
            this.sets.stsExtp['noData'].hide();
        }
        var oscLis = oBox.find('.scTab .scLi').removeClass('curr');
        oscLis.eq(curTabVal == 'prov' ? 0 : curTabVal == 'area' ? 1 : 2).addClass('curr');//设置当前 tab 卡
        if (outerCity != '0') {
            oscLis.eq(0).hide();
            oscLis.eq(1).hide();
        } else {
            oscLis.eq(0).show();
            oscLis.eq(1).show();
        }
        var mmnArr = [];//用于寻找数据中的最值
        if(dataLen > itemsCount){dataLen = datas.length = itemsCount;}//实际数据量多于 topN 的情况
        mount.each(datas, function (index, item) {
            var barVals = item.vals;
            for(var i = barVals.length; i--;){mmnArr.push(+barVals[i]);}
        });
        mmnArr = cMapUtil.getMMN(mmnArr);
        vars.eids = {};//用于按 eid 快速定位 item
        oBox.find('.items').hide().each(function (index) {//遍历 div 节点(items)，将实际的值填进去
            if(index >= dataLen){return 'break';}//实际数据量少于 topN 的情况，隐藏多余的 item
            var itemData = datas[index],
                eid = cMapUtil.getEid(itemData.pid),
                valArr = cMapUtil.getMMO(itemData.vals, mmnArr);//归一化
            T(this).find('.scRank').html((index + 1) + '.');
            T(this).find('.scName').html(mount.subStr(itemData.text, 8));
            T(this).find('.zbar').hide().each(function (jndex) {//遍历 div 节点(bars)，将实际的值填进去
                if(jndex >= valArr.length){return 'break';}//实际数据量少于 最多对比项 的情况
                T(this).css({'width': valArr[jndex] >= 0 ? (valArr[jndex] * barsWidth + widthLow) : 0, 'background-color': itemData.colors[jndex]}).show();
            });
            T(this).css({'padding': [0, 10, 10, 8, 5, 4][barCount] + 'px 10px'}).data('eid', eid).show();
            vars.eids[eid] = index;
        });
        oBox.css({left: padds.width - padds.right - padds.barWid - 10, top: padds.title + padds.tagHig - 10}).show();//先 show 再刷新 magicScroll，否则 scroll 消失
        var scrollBox = T('#' + vars.divID + ' .scrolls'),  //调整 magic_scroll 区高度
            iniScrols = BID.createScroll.inis,
            scrollBoxHeight = padds.height - padds.title - padds.tagHig - padds.bottom - 10 * 2 - 12 * 2;
        scrollBox.height(scrollBoxHeight);                  //设置 scroll 容器高度
        if(!iniScrols || !iniScrols[scrollBox[0].id]){
            BID.createScroll(scrollBox[0]);                 //创建 magic_scroll 实例对象
            scrollBox.mouseout();                           //创建后，立即隐藏滚动条，待鼠标滑入时再显示
            iniScrols = BID.createScroll.inis;
        }
        iniScrols[scrollBox[0].id].update();
        scrollBox.children().height(scrollBoxHeight);       //这似乎是 magic 一个bug，update 之后还需要修改这个高度
        //oBox.css({left: padds.width - padds.right - 10, top: padds.title + padds.tagHig - 10}).show();
        return this;
    };

    //颜色计算
    cMap_fn.cColor = function (color, curVal, maxVal, minVal) {
        var _maxVal = maxVal || 1;
        minVal = minVal || 0;
        curVal = (curVal - minVal) / (_maxVal - minVal);
        if(_maxVal == minVal){curVal = 1;}
        if(maxVal === 0){curVal = 1 / 6;}                   //有数据，但全是0，当对比项搜索量差3个量级以上时
        color = Raphael.color(color);
        return Raphael.hsl(color.h, color.s * curVal, 1 - (1 - color.l) * curVal);
    };

    //产生值例圆圈样式，默认 steps=6; maxVal=1; minVal=0;
    //内核半径按 10 - (steps - 1) * 1.5 = 2.5 计算，光环宽度按 5 - (steps - 1) * 0.7 = 1.5 计算
    cMap_fn.cStyle = function (curVal, color) {
        var resultOpt = sCopy({'fill': color, 'stroke': color}, this.opts.cityP),
            r = 4 + curVal * 5 * 1.5,
            sw = 2 + curVal * 5 * 0.7;
        resultOpt['r'] = r;
        resultOpt['stroke-width'] = sw * 2;
        return resultOpt;
    };

    //绘值例区
    cMap_fn.drawValv = function (curTagIndex, curTabVal) {
        var valvType = 'circ';
        if(curTabVal == 'prov' || this.opts.outerCity != '0'){valvType = 'rect';}
        var color = mount.getColor(curTagIndex),
            paper = this.paper,
            padds = this.opts.padds,
            stsVals = this.sets.stsVals,
            vars = this.varsValv || (this.varsValv = {}),
            valRects = stsVals['rects'] || (stsVals['rects'] = []),
            valCircs = stsVals['circs'] || (stsVals['circs'] = []),
            blocksWidth = 60,           //值域色块区宽度
            blocksCount = 6,            //色块数量
            left = padds.left + 8,
            top = paper.height - padds.bottom - padds.valHig,
            textOpts = {'text-anchor': 'start', 'fill': '#999999'};
        if(valvType == 'rect'){
            stsVals['circ'] && stsVals['circ'].hide();      //方形值例与圆圈形值例切换
            if(!stsVals[valvType]){
                vars.left = left; vars.top = top;
                paper.setStart();
                var i_text = paper.text(left, top + 14, '搜索指数：高').attr(textOpts);
                var i_text_width = i_text.getBBox().width;
                paper.text(left + i_text_width + blocksWidth + 15, top + 14, '低').attr(textOpts);
                for(var i = blocksCount; i--;){
                    valRects[i] = paper.rect(left + i_text_width + 10 + i * blocksWidth / blocksCount, top + 8, blocksWidth / blocksCount - 2, 13);
                    valRects[i].attr({'stroke-width': 0, 'stroke-opacity': 0});
                }
                stsVals[valvType] = paper.setFinish();
            }else if(left != vars.left || top != vars.top){
                stsVals[valvType].translate(left - vars.left, top - vars.top);
                vars.left = left;
                vars.top = top;
            }
            for(var i = blocksCount; i--;){                 //不同对比项下值例颜色不同
                valRects[i].attr({'fill': this.cColor(color, blocksCount - i, blocksCount)})
            }
        }else{
            stsVals['rect'] && stsVals['rect'].hide();      //方形值例与圆圈形值例切换
            if(!stsVals[valvType]){
                vars.left = left; vars.top = top;
                paper.setStart();
                var i_text = paper.text(left, top + 14, '搜索指数：高').attr(textOpts);
                var i_text_width = i_text.getBBox().width;
                var left_char_low = left + i_text_width + blocksWidth + 15 + 77;
                var circ_offset =  [10, 27, 45, 68, 97, 130];
                paper.text(left_char_low, top + 14, '低').attr(textOpts);
                paper.path(['M', left_char_low - circ_offset[0], top + 15, 'L', left_char_low - circ_offset[5], top + 15]).attr({'stroke': '#dadada'});
                for(var i = blocksCount; i--;){
                    valCircs[i] = paper.circle(left_char_low - circ_offset[i], top + 15);
                }
                stsVals[valvType] = paper.setFinish();
            }else if(left != vars.left || top != vars.top){
                stsVals[valvType].translate(left - vars.left, top - vars.top);
                vars.left = left;
                vars.top = top;
            }
            for(var i = blocksCount; i--;){                 //不同对比项下值例颜色不同
                valCircs[i].attr(this.cStyle((i - 1) / (blocksCount - 1), color));//图中的城市点被放大了，但值例区不要放大，所以 i - 1 降一级
            }
        }
        var curDatas = this.datas.mapDatas[curTagIndex] || {};//用于判断是否暂无数据，是则不显示值例区
        if(curDatas[curTabVal + '_real'] && curDatas[curTabVal + '_real'].length){
            stsVals[valvType].show();
        }else{
            stsVals[valvType].hide();
        }
        return this;
    };

    //绘tag图例区
/*
    cMap_fn.drawTags = function (curTagIndex) {return this;
        var tagItems = this.datas.tagItems,
            dataLen = tagItems.length,
            paper = this.paper,
            padds = this.opts.padds,
            stsTags = this.sets.stsTags,
            itemMargin = 6,             //与右边相邻项的距离
            rectWidth = 9,              //小正方形边长
            rectLeft = 9,               //小正方形与背景矩形左侧的距离
            rectTop = 6,                //小正方形与上边
            rectRight = 6,              //小正方形与右侧文字的间距
            textRight = 8,              //文字与背景矩形右侧的距离
            textTop = 10,               //文字与上边
            bgRectHg = 22,              //背景矩形高度
            left = padds.left,
            top = padds.title + 15,     //考虑 tag 与 title 之间的空隙
            currLeft = left,            //当前项距画布左侧的距离，值随项数累加
            textOpts = {'text-anchor': 'start', 'fill': '#333333'};
        if(stsTags['']){stsTags[''].remove();}
        paper.setStart();
        mount.each(tagItems, function (index, item) {
            var itemColor = item.color;
            var itemTextOpts = textOpts;
            var i_backRect;
            if(index == curTagIndex && dataLen > 1){
                itemColor = '#ffffff';
                itemTextOpts = sCopy({'fill': '#ffffff'}, itemTextOpts);
                i_backRect = paper.rect(currLeft, top, 0, bgRectHg).attr({'stroke-width': 0, 'fill': item.color});
            }
            currLeft += rectLeft;
            paper.rect(currLeft, top + rectTop, rectWidth, rectWidth).attr({'stroke-width': 0, 'fill': itemColor});
            currLeft += rectWidth + rectRight;
            var text_width = paper.text(currLeft, top + textTop, item.text).attr(itemTextOpts).getBBox().width;
            var bgRectWd = text_width + rectLeft + rectWidth + rectRight + textRight;
            i_backRect && i_backRect.attr({width: bgRectWd});
            currLeft += bgRectWd - rectLeft - rectWidth - rectRight + itemMargin;
        });
        stsTags[''] = paper.setFinish();
        return this;
    };
*/

    //用div绘可交互的tag图例区
/*
    cMap_fn.divTags = function (curTagIndex) {return this;
        var tagItems = this.datas.tagItems,
            dataLen = tagItems.length,
            vars = this.varsTags || (this.varsTags = {}),
            opts = this.opts,
            padds = opts.padds,
            oBox;
        var createHtml = function () {
            var snmhv = '<i class="rect"></i><span class="tag"></span>';
            snmhv = '<div class="nmTag">' + snmhv + '</div><div class="hvTag">' + snmhv + '</div>';
            var sItem = '<a class="items" href="javascript:;">' + snmhv + '</a>';
            return new Array(6).join(sItem);
        };
        if(!vars.divID){
            var self = this;
            oBox = T('<div class="tag4map"></div>').hide().html(createHtml()).appendTo(T('#' + opts.divID).parent());
            oBox.find('.items').each(function (index) {
                T(this).data('tagIndex', index);
            }).click(function () {
                self.raise('tagClick', self, T(this).data('tagIndex'));
            });
            vars.divID = BID.gsid(oBox[0]);
        }else{
            oBox = T('#' + vars.divID).hide();
        }
        oBox.find('.items').hide().removeClass('curr').each(function (index) {
            if(index >= dataLen){return 'break';}
            var T_this = T(this),
                itemData = tagItems[index],
                itemBgColor = {'background-color': itemData.color};
            if(index == curTagIndex && dataLen > 1){T_this.addClass('curr');}
            T_this.find('.rect').first().css(itemBgColor);
            T_this.find('.hvTag').css(itemBgColor);
            T_this.attr('title', itemData.text).show().find('.tag').html(itemData.text);
        });
        oBox.css({left: padds.left - 10, top: padds.title + 10 - 5}).show();
        //oBox.css({left: padds.left - 10, top: padds.title - 40}).show();
        return this;
    };
*/

    //全国链接
    cMap_fn.divBackNav = function (cityName) {
        var vars = this.varsBnav || (this.varsBnav = {}),
            opts = this.opts,
            padds = opts.padds,
            oBox;
        if(!vars.divID){
            var self = this;
            oBox = T('<div class="bNav4map"><a class="back" href="javascript:;">全国</a> 〉<span class="provName"></span></div>').appendTo(T('#' + opts.divID).parent());
            oBox.find('a.back').click(function () {self.raise('cityClick', self, 0);});
            vars.divID = BID.gsid(oBox[0]);
        }else{
             oBox = T('#' + vars.divID);
        }
        oBox.css({left: padds.left, top: padds.title + 5}).find('.provName').html(cityName);
        if(cityName){oBox.show();}else{oBox.hide();}
        return this;
    };

    //订阅事件
    cMap_fn.care = function (evtName, funCbk) {
        var events = this.events || (this.events = {}),
            careEvent = events[evtName] || (events[evtName] = []);
        careEvent.push(funCbk);
        return this;
    };

    //触发事件
    cMap_fn.raise = function (evtName, scope, args) {
        var events = this.events || {},
            careEvent = events[evtName] || [],
            careLen = careEvent.length;
        args = [].slice.call(arguments, 2);
        for(var i = 0; i < careLen; i++){
            careEvent[i].apply(scope, args);
        }
        return this;
    };

    sCopy(cMap_fn.prototype, cMap_fn);
    return mount[_funName] = cMap;
})(BID);










































/*
地图业务应用
*/

function _cMap_ini_use(opts) {

var tplsCtrl = opts.tplsCtrl;
var mapBoxID = opts.mapBoxID;
var iBlock = BID.sentimBlock(mapBoxID).title([]).tabTils([]);
var tabUli_id = iBlock.getEl('tabUl')[0].id;
var R_box = T('#' + mapBoxID + ' .R_paper');
var divID = BID.gsid(R_box[0]);
var itfc = {'Industry': 'getIndRegion/'}[tplsCtrl] || 'getRegion/';
var iMap = BID.cMap({divID: divID, userIn: tplsCtrl, padds: opts.padds});      //行业指数中使用地图时，有些行为不同
var cityIDname = BID.cityIDname();                          //城市 id 转 name 查询工具
var paramForm = BID.getParams();

var curRegion, curTabVal, curTagIndex;
var lastRegion = curRegion = -1;
var lastTabVal = curTabVal = '';
var lastTagIndex = curTagIndex = -1;


curRegion = paramForm.area[0];
curTabVal = 'prov';
curTagIndex = 0;
if (opts.city) {
    curRegion = opts.city;
}
if (opts.tag && opts.tag > 0) {
    if (opts.tag < paramForm.word.length) {curTagIndex = opts.tag;}
}
if (opts.tab == 'city' || opts.tab == 'prov') {
    curTabVal = opts.tab;
}else{
    opts.tab = '';                      //清除不合理值，后面在"切回全国"操作时，需要判断此值是否为空，是则强切省市tab到省，否则重现此值对应的tab
}
T('#' + tabUli_id + ' .tabLi').each(function (index) {
    if (index == curTagIndex) {
        T(this).addClass('curr');
    }else{
        T(this).removeClass('curr');
    }
});


var setOuterCity = function (region) {
    if (region != '0') {                                    //则可能是省，也可能是市
        var chkCity = cityIDname.city(region);
        if (chkCity.pid) {region = chkCity.pid;}            //如果是市，向上取省
    }
    var outerCityID = BID.cMapUtil.getEid(region);
    if (!outerCityID) {outerCityID = region = '0';}         //城市ID解析失败，这在截图时可能发生
    iMap.drawMain(outerCityID);                             //地图各组件尺寸、位置计算
    iMap.divBackNav(outerCityID != '0' ? cityIDname.getName(region) : '');//是否显示返回全国链接
    if (outerCityID != '0') {                               //当主轮廓城市切至"非全国"时，省市选项卡只能选中市
        curTabVal = 'city';
    }else{
        if (opts.tab) {curTabVal = opts.tab;}else{curTabVal = 'prov';}//当"切回全国"时，最好同时切回省tab，但如果opts.tab有指定值，则重现之
    }
    T('#' + iMap.opts.divID).siblings('.R_copyright').css({'right': iMap.opts.padds.right});//版权标识位置调整
    return region;                                          //截图时要验证 region 参数的合理性
};



//主轮廓城市、省市选项卡、对比项发生切换后，刷新地图显示
var chg_cty_tab_tag = function () {
    if (curRegion == lastRegion && curTabVal == lastTabVal && curTagIndex == lastTagIndex) {return;}//重复点击等

    iMap.tipHide();                                         //切换主轮廓城市、对比项、省市模式时，隐藏气泡
    try{iMap.sets.stsExtp.ctShadow.hide();}catch(e){}       //包括resize时，隐藏由 hover 带来的浮起阴影
    lastRegion = curRegion;
    iMap.ctyRegion = curRegion;

    //iMap.divTags(curTagIndex);//DIV版的图例也不要了，已换成通用 tab 切换
    //iMap.drawTags(curTagIndex);//SVG版的图例不做了（预截图用），只需要DIV版的图例
    lastTagIndex = curTagIndex;
    iMap.tagIndex = curTagIndex;


    var el = document.getElementById('areaName');
    if (curTabVal === 'area') {
	el.style.display = 'block';
    }
    else {
	el.style.display = 'none';
    }


    iMap.drawCitys(curTagIndex, curTabVal);                 //城市展示时，各省填充灰色
    iMap.drawPoints(curTagIndex, curTabVal);                //从市切到省时，隐藏城市圆圈，或者省图下展示城市数据时也不显示圆圈
    iMap.drawValv(curTagIndex, curTabVal);                  //最后画值例区，全国省份图 或者 省份城市图 用方块形值例，全国城市图 用圆形值例

    iMap.divBars(curTagIndex, curTabVal);                   //必须先画上面的城市轮廓，后画条图。因为在城市轮廓中会画南海诸岛，而画条图时会判断是否无数据，无则隐藏南海诸岛
    //iMap.drawBars(curTagIndex, curTabVal);//SVG版的条图区也不用了
    lastTabVal = curTabVal;
    iMap.tabVal = curTabVal;
};


var loadData = function (region) {
    region = curRegion = setOuterCity(region);              //截图时，在这里验证 region 参数的合理性
    BID.dataInterface('Region/' + itfc, 'region=' + region, function (msg) {
        var tags = BID.getParams.C32().tags;
        var data = (msg.data || {}).region;
        if(!data){
            data = [];
            for(var i = tags.length; i--;){data[i] = {key: tags[i]};}
        }
        iMap.setDatas(data);
        iMap.dataCache[region] = data;
        chg_cty_tab_tag();
        window.pageStatus = true;                           //设置特定变量 pageStatus 值，以便 PhantomJS 知道页面已经 ready
        opts.funCbk && opts.funCbk();
    }, {loading: R_box.parent()[0]});
};


//响应对比项切换
BID.evts.care(tabUli_id + '_tabClick', function (index) {iMap.raise('tagClick', null, index);});

BID.evts.care('width_resize', iMap.forceResize = function () {
    iMap.paperSize();
    lastTagIndex = -1;                                      //resize时，主城市轮廓、对比项、省市tab 均无变化，会被认为是无效点击
    chg_cty_tab_tag();
    T('#' + iMap.opts.divID).siblings('.R_copyright').css({'right': iMap.opts.padds.right});//版权标识位置调整
}, {gt: 500});


iMap.care('tagClick', function (tagIndex) {                 //响应对比项切换
    curTagIndex = tagIndex;
    chg_cty_tab_tag();
}).care('tabClick', function (tabVal) {                     //响应省市tab切换
    curTabVal = tabVal;
    chg_cty_tab_tag();
}).care('cityClick', function (eid) {                       //城市轮廓被点击，城市圆圈不响应点击
    if(tplsCtrl == 'Industry'){return;}                     //行业指数不响应省点击
    if (curTabVal === 'area'){return;}                      //区域不能点击

    var pid = BID.cMapUtil.getPid(eid);
    if(pid != '0'){
        if(!pid || !cityIDname.citys(pid)){return;}         //非全国，判断该城市是否被收录
        if(isNaN(iMap.sets.stsCity['eid'][eid].data('index'))){return;}//判断该省是否有数据，无数据的省，点开到市也无数据
    }
    if(!iMap.dataCache[pid]){                               //待展示的地区，其数据是否已经在缓存中
        loadData(pid);
    }else{
        curRegion = setOuterCity(pid);                      //截图时，在这里验证 region 参数的合理性
        iMap.setDatas(iMap.dataCache[pid]);                 //使用缓存数据
        chg_cty_tab_tag();
    }
}).care('cityHover', function (eid) {
    this.tipCity(eid, curTabVal);
}).care('cityHout', function (eid) {
    this.tipCity();
});

loadData(curRegion);

return iMap;
}




